python manage.py shell
from news.models import User, Author, Category, Post, Comment

1. Создать двух пользователей с помощью метода User.objects.create_user:

u1 = User.objects.create_user('Екатерина')
u2 = User.objects.create_user('Артём')


2. Создать два объекта модели Author, связанные с пользователями:

Author.objects.create(user=u1)
Author.objects.create(user=u2)


3. Добавить 4 категории в модель Category:

Category.objects.create(category_name = 'Спорт')
Category.objects.create(category_name = 'Наука')
Category.objects.create(category_name = 'Образование')
Category.objects.create(category_name = 'Технологии')


4. Добавить 2 статьи и 1 новость:

author1 = Author.objects.get(pk=1)
Post.objects.create(author=author1, post_type='AR', post_title='Спорт – важнейший помощник в учебе!', post_text='Смена умственной и физической деятельности является целесообразной формой отдыха и восстановления работоспособности.')
Post.objects.create(author=author1, post_type='NW', post_title='Жесткий диск с искусственным интеллектом!', post_text='Разработан первый чип, интегрирующий машинное обучение. Это искусственный интеллект, который не только предлагает лучшую производительность, но и позволяет уменьшить задержку доступа к имеющимся данным.')
author2 = Author.objects.get(pk=2)
Post.objects.create(author=author2, post_type='AR', post_title='Образовательные технологии будущего!', post_text='Виртуальная реальность, геймификация и искусственный интеллект — ещё вчера это казалось невероятным, а сегодня успешно внедряется в образовательный процесс.')


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):

p1 = Post.objects.get(id=2)
p1.post_category.add(Category.objects.get(pk=1))
p1.post_category.add(Category.objects.get(pk=3))

p2 = Post.objects.get(id=3)
p2.post_category.add(Category.objects.get(pk=2))
p2.post_category.add(Category.objects.get(pk=4))

p3 = Post.objects.get(id=1)
p3.post_category.add(Category.objects.get(pk=3))
p3.post_category.add(Category.objects.get(pk=4))


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):

#создадим три дополнительных пользователя для комментариев
u3 = User.objects.create_user('Ирина')
u4 = User.objects.create_user('Максим')
u5 = User.objects.create_user('Илья')

Comment.objects.create(post=Post.objects.get(pk=1), user=User.objects.get(pk=3), comment_text='Согласен! Спорт позволяет поддерживать хорошую физическую форму и помогает активно отдохнуть от умственной нагрузки.')
Comment.objects.create(post=Post.objects.get(pk=2), user=User.objects.get(pk=4), comment_text='Прикольно! До чего техника дошла!')
Comment.objects.create(post=Post.objects.get(pk=3), user=User.objects.get(pk=6), comment_text='С одной стороны, быстрое развитие технологий повышает необходимый базовый уровень знаний для современного человека, а с другой - технологии дают возможность облегчить процесс овладения необходимыми знаниями.')
Comment.objects.create(post=Post.objects.get(pk=2), user=User.objects.get(pk=5), comment_text='Насколько мне известно - это Seagate SkyHawk AI, которые предназначены для использования в системах видеонаблюдения.')
Comment.objects.create(post=Post.objects.get(pk=1), user=User.objects.get(pk=4), comment_text='Спорт - это здоровье!')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:

Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).dislike()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=4).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=5).like()
Comment.objects.get(pk=5).like()
Comment.objects.get(pk=5).like()
Comment.objects.get(pk=5).like()
Comment.objects.get(pk=6).like()
Comment.objects.get(pk=6).like()
Comment.objects.get(pk=6).dislike()

Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=3).like()


8. Обновить рейтинги пользователей:

auth_rating = Author.objects.get(pk=1)
auth_rating.update_rating()
auth_rating = Author.objects.get(pk=2)
auth_rating.update_rating()


9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

Author.objects.order_by('author_rating').last().user.username
Author.objects.order_by('author_rating').last().author_rating


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
основываясь на лайках/дислайках к этой статье:

auth_best = Post.objects.order_by('-post_rating').first()
auth_best.date_creation
auth_best.author.user.username
auth_best.post_rating
auth_best.post_title
auth_best.preview()


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:

comments = Comment.objects.all().filter(post_id=auth_best.id)
for comment in comments:
    print(comment.date_creation)
    print(User.objects.get(id=comment.user_id))
    print(comment.comment_rating)
    print(comment.comment_text)

